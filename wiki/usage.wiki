== Generation ==

{{{
$wsdl = new WSDLDocument( "MyClass", "http://server.handler" );
echo $wsdl->saveXml();
}}}

The first argument is the name of the service class. If you are using SOA in your application it will be easy, otherwise this is a good time to start.

The second argument is the url of webservices request handler. You have to prepare you application to accept a SOAP request.

Before to try to generate the WSDL you must document the classes. See next section.

== Preparing Classes ==

=== Service Class ===

You have to save the type of return and arguments. You can do it using "@param" and "@return" tag comments.

{{{
/**
 * Service class documentation.
 */
class MyClass
{

    /**
     * Method documentation.
     *
     * @param string
     * @param MyStruct it works with complex types, see above how to prepare a complex class
     * @param integer[] simple array of integer
     * @param float[][][] array of array of array of float
     * @param boolean
     * @return MyStruct[] array of MyStruct Class
     */
    public function justSample(){}

}
}}}

=== Complex Type Class ===

Like services you can use the tag "@var" to specific the type of property.

{{{
class MyStruct
{

    /**
     * @var string
     */
    public $name;

    /**
     * @var integer[]
     */
    public $anotherProperty;

}
}}}